#include "slist.h"
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

SList slist_crear() {
  return NULL;
}

void slist_destruir(SList lista) {
  SNodo *nodoAEliminar;
  while (lista != NULL) {
    nodoAEliminar = lista;
    lista = lista->sig;
    free(nodoAEliminar);
  }
}

int slist_vacia(SList lista) {
  return lista == NULL;
}

SList slist_agregar_final(SList lista, int dato) {
  SNodo *nuevoNodo = malloc(sizeof(SNodo));
  nuevoNodo->dato = dato;
  nuevoNodo->sig = NULL;
  if (lista == NULL)
    lista = nuevoNodo;
  else {
    SList temp = lista;
    for (; temp->sig != NULL; temp = temp->sig);
    /* ahora 'temp' apunta al ultimo elemento en la lista */
    temp->sig = nuevoNodo;
    //ya modifico la lista, tiene que devolverse ok
  }
  return lista;
}

void slist_agregar_final2(SList *lista, int dato) {
  SNodo *nuevoNodo = malloc(sizeof(SNodo));
  nuevoNodo->dato = dato;
  nuevoNodo->sig = NULL;
  if (*lista == NULL) {
    *lista = nuevoNodo;
  } else {
    SList temp = *lista;
    for (; temp->sig != NULL; temp = temp->sig);
    temp->sig = nuevoNodo;
  }
}

SList slist_agregar_finalR(SList lista, int dato) {
  if (lista == NULL) {
    lista = malloc(sizeof(SNodo));
    lista->dato = dato;
    lista->sig = NULL;
  } else {
    lista->sig = slist_agregar_finalR(lista->sig, dato);
  }
  return lista;
}

SList slist_agregar_inicio(SList lista, int dato) {
  SNodo *nuevoNodo = malloc(sizeof(SNodo));
  nuevoNodo->dato = dato;
  nuevoNodo->sig = lista;
  return nuevoNodo;
}

void slist_agregar_inicio2(SList *lista, int dato) {
  SNodo *nuevoNodo = malloc(sizeof(SNodo));
  nuevoNodo->dato = dato;
  //no importa si es null, lo engancho. Si es null, se engancha el null.
  nuevoNodo->sig = *lista;
  *lista = nuevoNodo;
} 

void slist_recorrer(SList lista, FuncionVisitante visit) {
  for (SNodo * nodo = lista; nodo != NULL; nodo = nodo->sig)
    visit(nodo->dato);
}

int slist_longitud(SList lista) {
  //if(lista == NULL) return 0;
  int i = 0;
  for (; lista != NULL; i++) {
    lista = lista->sig;
  }
  return i;
}

SList slist_concatenar(SList lista1, SList lista2) {
  //SList listaNueva = slist_crear();
  SList temp;
  if (lista1 == NULL) {
    temp = lista2;
  } else {
    temp = lista1;
    while (lista1->sig != NULL) {
      lista1 = lista1->sig;
    }
    lista1->sig = lista2;
  }

  return temp;
}

SList slist_insertar(SList lista, int dato) {
  int longitud = slist_longitud(lista);
  if (longitud == 0)
    return slist_agregar_inicio(lista, dato);
  int posicion = rand() % longitud;
  return slist_insertar_posicion(lista, posicion, dato);
}

SList slist_insertar_posicion(SList lista, int posicion, int dato) {

  if (posicion > slist_longitud(lista) || posicion < 0) {
    printf("Error. No es posible insertar un elemento la posición %d\n",
           posicion);
    return lista;
  }

  if (posicion == 0)
    return slist_agregar_inicio(lista, dato);

  SNodo *temp = lista;
  for (int i = 0; i < posicion - 1; i++) {
    temp = temp->sig;
  }
  //creo el nuevo nodo
  SNodo *nuevoNodo = malloc(sizeof(SNodo));
  nuevoNodo->dato = dato;
  nuevoNodo->sig = temp->sig;
  temp->sig = nuevoNodo;

  return lista;
}

SList slist_eliminar(SList lista) {
  int longitud = slist_longitud(lista);
  if (longitud == 0) {
    printf("Error. No se pueden eliminar nodos de una lista vacía.");
    return lista;
  }
  int posicion = rand() % longitud;
  return slist_eliminar_posicion(lista, posicion);
}

SList slist_eliminar_posicion(SList lista, int posicion) {
  int longitud = slist_longitud(lista);
  if (posicion > longitud || longitud < 0) {
    printf("Error: no se puede eliminar un dato de la posición %d\n",
           posicion);
    return lista;
  }

  if (posicion == 0)
    return lista->sig;

  SNodo *temp = lista;
  for (int i = 0; i < posicion - 1; i++) {
    temp = temp->sig;
  }
  temp->sig = (temp->sig)->sig;
  return lista;
}

int slist_contiene(SList lista, int dato) {
  for (int i = 0; i < slist_longitud(lista); i++) {
    if (lista->dato == dato)
      return 1;
    else 
     lista = lista->sig;
  }
  return 0;
}

int slist_indice(SList lista, int dato) {
  for (int i = 0; i < slist_longitud(lista); i++) {
    if (lista->dato == dato)
      return i;
    else 
     lista = lista->sig;
  }
  return -1;
}

SList slist_intersecar(SList lista1, SList lista2) {
  SList lista = slist_crear();
  if (lista1 == NULL) return NULL;
  if (lista2 == NULL) return slist_intersecar(lista1->sig, lista2);
  if (lista1->dato == lista2->dato) {
    return slist_agregar_inicio(slist_intersecar(lista1, lista2->sig), lista1->dato);
  } else {
    return slist_intersecar(lista1->sig, lista2);
  }
}

SList slist_intersecar_custom(SList lista1, SList lista2, FuncionComparadora comparar) {
  SList lista = slist_crear();
  if (lista1 == NULL) return NULL;
  if (lista2 == NULL) return slist_intersecar(lista1->sig, lista2);
  if (comparar(lista1->dato,lista2->dato) == 0) {
    return slist_agregar_inicio(slist_intersecar(lista1, lista2->sig), lista1->dato);
  } else {
    return slist_intersecar(lista1->sig, lista2);
  }
}

SList slist_intercalar(SList lista1, SList lista2) {
  if (lista1 == NULL) {
    if (lista2 == NULL)
      return NULL;
    else return slist_agregar_inicio(slist_intercalar(lista1, lista2->sig), lista2->dato);
  } else { 
    if (lista2 == NULL) {
      return slist_agregar_inicio(slist_intercalar(lista1->sig, lista2), lista1->dato);
    } else {
      slist_agregar_inicio(slist_intercalar(lista2, lista1->sig),lista1->dato);
    }
  }
}

SList slist_ordenar(SList lista, FuncionComparadora comparar) {
  SList ordenada = slist_crear();
  ordenada = slist_agregar_inicio(ordenada, lista->dato);
  for (SList temp = lista->sig; temp != NULL; temp = temp->sig) {
    ordenada = slist_agregar_creciente(ordenada, temp->dato, comparar);
 }
 return ordenada;
}

SList slist_agregar_creciente(SList lista, int dato, FuncionComparadora comparar) {
  if(slist_vacia(lista) || ((comparar(lista->dato, dato) >= 0))) 
    return slist_agregar_inicio(lista, dato);
  else {
    //lista->sig = slist_agregar_creciente(lista->sig, dato, comparar);
    //return lista;
    return slist_agregar_inicio(slist_agregar_creciente(lista->sig, dato, comparar),
             lista->dato);
  }
}

SList slist_reverso(SList lista) {
  SList reverso = slist_crear();
  for(SList temp = lista; temp != NULL; temp = temp->sig) {
    reverso = slist_agregar_inicio(reverso, temp->dato);
  }
  return reverso;
}

// realizable en o(n), ver cómo carajos
SList slist_partir(SList lista) {
  int longLista = slist_longitud(lista);
  int longLista1 = (longLista / 2) + (longLista % 2);
  printf("\nlong de la lista: %d\n", longLista);
  printf("\nlong de la lista1: %d\n", longLista1);
  printf("\nlong de la lista2: %d\n", longLista - longLista1);

  SList lista2;
  for (int i = 1; i < longLista1; lista = lista->sig, i++);

  lista2 = lista->sig;
  lista->sig = NULL;

  return lista2;
}
