#ifndef __SLIST_H__
#define __SLIST_H__

#include <stddef.h>

//sinónimos de tipos
typedef void (*FuncionVisitante)(int dato);
typedef int (*FuncionComparadora)(int dato1, int dato2);

typedef struct _SNodo {
  int dato;
  struct _SNodo *sig;
} SNodo;

typedef SNodo *SList;

/**
 * Devuelve una lista vacía.
 */
SList slist_crear();

/**
 * Destruccion de la lista.
 */
void slist_destruir(SList lista);

/**
 * Determina si la lista es vacía.
 */
int slist_vacia(SList lista);

/**
 * Agrega un elemento al final de la lista.
 */
SList slist_agregar_final(SList lista, int dato);
void slist_agregar_final2(SList *lista, int dato);
SList slist_agregar_finalR(SList lista, int dato);

/**
 * Agrega un elemento al inicio de la lista.
 */
SList slist_agregar_inicio(SList lista, int dato);
void slist_agregar_inicio2(SList *lista, int dato);
//no tiene sentido el modo rec.

/**
 * Recorrido de la lista, utilizando la funcion pasada.
 */
void slist_recorrer(SList lista, FuncionVisitante visit);

/**
 * (1.a) Retorna la longitud de una lista
 */
int slist_longitud(SList lista);

/**
 * (1.b) Retorna una lista, concatenación de las listas que recibe
 */
SList slist_concatenar(SList lista1, SList lista2);

/**
 * (1.c) Inserta un dato en una lista en una posición arbitraria.
 */
SList slist_insertar(SList lista, int dato);

/**
 * (1.c.1) Inserta un dato en una lista en una posición arbitraria.
 */
SList slist_insertar_posicion(SList lista, int posicion, int dato);

/**
 * (1.d) Borra de una lista un dato apuntado en una posición arbitraria.
 */
SList slist_eliminar(SList lista);

/**
 * (1.d.1) Borra de una lista un dato apuntado en una posición dada.
 */
SList slist_eliminar_posicion(SList lista, int posicion);

/**
 * (1.e) Determina si un elemento está en una lista dada.
 * retorna 1 si está, retorna 0 sino.
 */
int slist_contiene(SList lista, int dato);

/**
 * (1.f) Devuelve la posición de la primera ocurrencia de un elemento si el mismo está en
 * la lista y -1 en caso que no esté.
 */
int slist_indice(SList lista, int dato);

/** 
 * (1.g) devuelve una lista con los elementos comunes (ind de la posición)
 * las listas originales no se modifican.
 */
SList slist_intersecar(SList lista1, SList lista2);

/**
 * (1.h) igual que intersecar, pero toma noción de igualdad de funcion comparar
 * comparar se comporta como strcmp.
 */
SList slist_intersecar_custom(SList lista1, SList lista2, FuncionComparadora comparar);

/**
 * (1.i) ordena una lista según criterio dado por la func comparadora
 * comparar retorna igual que strcmp()
 */
SList slist_ordenar(SList lista, FuncionComparadora comparar);
SList slist_agregar_creciente(SList lista, int dato, FuncionComparadora comparar);

/**
 * (1.j) obtiene el reverso de una lista.
 */
SList slist_reverso(SList lista);

/**
 * (1.k) dadas dos listas, intercala elementos en una lista resultante
 */
SList slist_intercalar(SList lista1, SList lista2);

/**
 * (1.l) Recibe una lista y la divide a la mitad.
 * Retorna un puntero al primer elemento de la segunda mitad.
 * Si la lista tiene (2n+1) elementos, la primer lista tendrá (n+1) elementos.
 */
SList slist_partir(SList lista);

#endif                          /* __SLIST_H__ */
