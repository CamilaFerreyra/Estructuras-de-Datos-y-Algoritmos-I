#include "dlist.h"
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

DList dlist_crear() {
    DList lista = {NULL, NULL};
    return lista;
}

void dlist_destruir(DList lista) {
 DNodo* nodo = lista.primero;
 while (nodo != NULL) {
  DNodo* temp = nodo;
  nodo = nodo->sig;
  free(temp);   
 }
}

int dlist_vacia(DList lista) {
 return lista.primero == NULL;
}

DList dlist_agregar_final(DList lista, int dato) {
    DNodo* nuevo = malloc(sizeof(DNodo));
    nuevo->dato = dato;
    nuevo->sig = NULL;
    nuevo->ant = lista.ultimo;
    
    if (lista.ultimo == NULL) {
     //lista vacía
     //lista.ultimo = nuevo;
     lista.primero = nuevo;
    } else {
       (lista.ultimo)->sig = nuevo;
       //lista.ultimo = nuevo;
    }
    lista.ultimo = nuevo;

    return lista;
}

DList dlist_agregar_inicio(DList lista, int dato) {
    DNodo* nuevo = malloc(sizeof(DNodo));
    nuevo->dato = dato;
    nuevo->ant = NULL;
    nuevo->sig = lista.primero;
    
    if (lista.primero == NULL) {
     //lista vacía
     //lista.primero = nuevo;
     lista.ultimo = nuevo;
    } else {
       (lista.primero)->ant = nuevo;
       //lista.primero = nuevo;
    }
    lista.primero = nuevo;

    return lista;
}

void dlist_recorrer (DList lista, FuncionVisitante visit, DListOrdenRecorrido ord) {
 if(lista.primero == NULL) return; //lista vacía

 if (ord == DLIST_RECORRIDO_HACIA_ATRAS) {
    // Recorrido desde el último hasta el primero
    DNodo* nodo = lista.primero;
    while (nodo != NULL) {
     visit(nodo->dato);
     nodo->ant;
    }
 } else {
    //desde el primero hasta el último
    DNodo* nodo = lista.ultimo;
    while (nodo != NULL) {
     visit(nodo->dato);
     nodo = nodo->sig;
    }
 }
}
